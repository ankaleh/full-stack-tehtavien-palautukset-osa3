{"version":3,"sources":["services/persons.js","components/PersonForm.js","components/Persons.js","components/Filter.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","getAll","a","request","axios","get","response","data","create","newPerson","post","then","update","id","updatedPerson","put","deletePerson","delete","PersonForm","persons","setPersons","newName","setNewName","newNumber","setNewNumber","handleNameChange","handleNumberChange","setMessage","setErrorMessage","value","onChange","type","onClick","event","preventDefault","personsAdded","filter","person","name","length","number","personService","concat","setTimeout","catch","error","console","log","JSON","stringify","window","confirm","map","p","Persons","props","numbersToShow","key","Filter","result","handleResultChange","Notification","message","errorMessage","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","setResult","showAll","setShowAll","useEffect","initialPersons","toString","toLowerCase","match","target","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bc28f57.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = async () => {\n    const request = axios.get(baseUrl)\n    const response = await request\n    return response.data\n}\n\nconst create = newPerson => {\n    const request = axios.post(baseUrl, newPerson)\n    return request.then(response => response.data)\n}\n\nconst update = async (id, updatedPerson) => {\n    const request = axios.put(`${baseUrl}/${id}`, updatedPerson)\n    const response = await request\n    return response.data\n}\n\nconst deletePerson = async (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    const response = await request\n    return response.data\n}\n\n  \nexport default { getAll, create, update, deletePerson }\n\n\n\n","import React from 'react'\nimport personService from '../services/persons'\n\nconst PersonForm = ({persons, setPersons, newName, setNewName, newNumber, setNewNumber, handleNameChange, handleNumberChange, setMessage, setErrorMessage}) => {\n    \n    const addPerson = (event) => {\n        event.preventDefault()\n    \n        var personsAdded = persons.filter((person) => person.name===`${newName}`)\n        \n        if (personsAdded.length===1) {\n          \n          if (window.confirm(`${newName} on jo lisätty puhelinluetteloon. Haluatko korvata vanhan numeron uudella?`)) {\n            \n            const person = personsAdded[0]\n        \n            const updatedPerson = {...person, number: newNumber}\n            personService.update(person.id, updatedPerson)\n                .then(response => {\n                    setPersons(persons.map(p => p.id !== person.id ? p : response))\n                    setNewName('')\n                    setNewNumber('')\n                    setMessage('Puhelinnumero päivitetty!')\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 3000)\n                })\n                .catch(error => {\n                    setErrorMessage('Yhteystieto on jo poistettu.')\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 3000)\n                    \n                })\n\n          }\n          \n          return \n          \n        }\n    \n        const newPerson = {\n          name: newName,\n          number: newNumber\n        }\n\n        personService\n            .create(newPerson)\n            .then(response => {\n                setPersons(persons.concat(response))\n                setNewName('')\n                setNewNumber('')\n                setMessage('Uusi yhteystieto lisätty!')\n                    setTimeout(() => {\n                        setMessage(null)\n                    }, 3000)\n            })\n            .catch(error => {\n                // pääset käsiksi palvelimen palauttamaan virheilmoitusolioon näin\n                const response = error.response.data\n                console.log(response)\n                setErrorMessage(JSON.stringify(response))\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 3000)\n\n            })\n\n    }\n\n    return (\n        <>\n            <form>\n                <div>\n                nimi: <input value={newName} onChange={handleNameChange}/>\n                </div>\n            <div>\n                numero: <input value={newNumber} onChange={handleNumberChange}/>\n            </div>\n      \n            <div>\n                <button type=\"submit\" onClick={addPerson}>Lisää</button>\n            </div>\n            </form>\n\n        </>\n\n\n    )\n}\nexport default PersonForm\n","import React from 'react'\nimport personService from '../services/persons'\n\nconst Persons = (props) => {\n    return (\n        <>\n            <ul>\n                {props.numbersToShow.map(person =>\n                \n                <p key={person.name}>\n                    {person.name} {' '}\n                    {person.number}\n                    <button type=\"submit\" onClick={() => {\n            \n                        if (window.confirm(`Haluatko varmasti poistaa yhteystiedon ${person.name}?`)) {\n                            personService.deletePerson(person.id)\n                            .then(() => {\n                                props.setPersons(props.persons.filter(p => p.id !== person.id))\n                                props.setMessage('Yhteystieto poistettu!')\n                                setTimeout(() => {\n                                    props.setMessage(null)\n                                }, 3000)\n                            })\n                            .catch(error => {\n                                props.setErrorMessage('Yhteystieto on jo poistettu.')\n                                setTimeout(() => {\n                                    props.setErrorMessage(null)\n                                }, 3000)\n                                props.setPersons(props.persons.filter(p => p.id !== person.id))\n                            })\n                            \n                            \n                        } \n                        \n                        }}>\n                        Poista yhteystieto\n                    </button>\n                </p>\n                )}\n                \n            </ul>\n        </>\n    )\n}\nexport default Persons","import React from 'react'\n\nconst Filter = ({result, handleResultChange}) => {\n\n\n    return (\n        <div>\n            Kirjoita nimi tai sen osa: <input value={result} onChange={handleResultChange}/>\n        </div>\n    )\n}\nexport default Filter","import React from 'react'\n\nconst Notification = ({message, errorMessage}) => {\n    const messageStyle = {\n        color: 'green',\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    const errorMessageStyle = {\n        color: 'red',\n        background: 'lightgrey',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    if (message===null && errorMessage===null) {\n        return null\n    }\n\n    if (errorMessage!==null) {\n        return (\n            <div style={errorMessageStyle}>\n            {errorMessage}\n        </div>\n        )\n    }\n    return (\n        <div style={messageStyle}>\n            {message}\n        </div>\n\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n\n  const [ result, setResult] = useState('')\n  const [ showAll, setShowAll ] = useState(true)\n\n  const [ message, setMessage] = useState(null)\n  const [ errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(()=> {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  \n  }, [])\n\n  const numbersToShow = showAll\n    ? persons \n    : persons.filter((person) => person.name.toString().toLowerCase().match(`${result.toString().toLowerCase()}`))\n\n  const handleResultChange = (event) => {\n    setShowAll(false)\n    setResult(event.target.value)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n  return (\n    <div>\n      <h1>Puhelinluettelo</h1>\n      <Notification message = {message} errorMessage={errorMessage}/>\n      <h2>Etsi yhteystieto</h2>\n      <Filter result={result} handleResultChange={handleResultChange}/>\n\n      <h3>Yhteystiedot</h3>\n      <Persons numbersToShow={numbersToShow} persons={persons} setPersons={setPersons} setMessage={setMessage} setErrorMessage={setErrorMessage}/>\n\n      <h3>Lisää uusi yhteystieto</h3>\n      <PersonForm persons = {persons} setPersons={setPersons} newName={newName} setNewName={setNewName} newNumber={newNumber} setNewNumber={setNewNumber} handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} setMessage={setMessage} setErrorMessage={setErrorMessage}/>\n      \n    </div>\n\n  )\n\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}